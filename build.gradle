plugins {
    id 'com.gorylenko.gradle-git-properties' version '2.0.0'
    id 'org.springframework.boot' version '2.1.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'com.devsoap.vaadin-flow' version '1.2'
	id 'java'
	id 'com.github.spotbugs' version '2.0.0'
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "UTC"
}

spotbugs {
    toolVersion = '4.0.0-beta1'
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'low'
    showProgress = true
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        html {
            enabled = true
        }
        xml {
            enabled = false
        }
    }
}

group = 'io.pivotal'
version = '0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11

repositories {
	vaadin.repositories()
	mavenCentral()
}

ext {
	set('springCloudServicesVersion', '2.1.3.RELEASE')
	set('springCloudVersion', 'Greenwich.SR1')
	set('commons-lang3.version', '3.9')
	set('jackson.version', '2.9.9')
	set('junit-jupiter.version', '5.4.2')
	set('lombok.version', '1.18.8')
	set('mockito.version', '2.27.0')
	set('resilience4jVersion', '0.15.0')
	set('vaadinVersion', '13.0.7')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${springCloudServicesVersion}"
		mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
	}
}

bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
}

configurations {
	// exclude Logback
    implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

dependencies {
	annotationProcessor('org.projectlombok:lombok')
	implementation('org.projectlombok:lombok')
	implementation('org.apache.commons:commons-lang3')
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	runtimeOnly('org.springframework.boot:spring-boot-devtools')
	implementation('org.springframework.boot:spring-boot-starter-log4j2')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-webflux')
	implementation('io.projectreactor:reactor-core:3.2.10.RELEASE')
    implementation('io.projectreactor.netty:reactor-netty:0.8.9.RELEASE')
	implementation vaadin.bom()
    implementation vaadin.platform()
	implementation('com.vaadin:vaadin-spring-boot-starter')
	//implementation('com.github.appreciated:apexcharts:0.8.0')
	implementation('org.springframework.cloud:spring-cloud-loadbalancer')
	implementation("io.github.resilience4j:resilience4j-spring-boot2:${resilience4jVersion}")
	implementation("io.github.resilience4j:resilience4j-reactor:${resilience4jVersion}")
	implementation('io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry')
	implementation('io.micrometer:micrometer-registry-prometheus')
	testImplementation('io.projectreactor:reactor-test')
	testImplementation('org.junit.jupiter:junit-jupiter-api')
	testImplementation('org.junit.jupiter:junit-jupiter-params')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
	testImplementation('org.mockito:mockito-core')
	testImplementation('org.mockito:mockito-junit-jupiter')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
	    exclude group: 'junit', module: 'junit'
	}
}
